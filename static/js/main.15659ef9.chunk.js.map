{"version":3,"sources":["heading/index.js","input-table/index.js","chart/index.js","graph-values/index.js","App.js","reportWebVitals.js","index.js"],"names":["Headings","className","InputTable","handleInput","date","time","fiberLength","fiberId","lamdaZero","slope","dropdown","Table","type","placeholder","value","onChange","target","onClick","window","print","Graph","data","labels","x","datasets","fill","lineTension","backgroundColor","borderColor","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","y","options","legend","display","scales","xAxes","scaleLabel","labelString","position","ticks","min","max","autoskip","autoSkipPadding","beginAtZero","suggestedMin","suggestedMax","precision","yAxes","GraphValues","rowObject","index","length","push","xAxix","yAxix","parseFloat","toFixed","map","row","i","xVal","yVal","getRow","App","useState","setDate","setTime","setFiberLength","setFiberId","setDropdown","setMin","setMax","minSlope","setMinSlope","maxSlope","setMaxSlope","Math","random","setLamdaZero","setSlope","setY","useEffect","formatDropdown","forEach","pow","console","log","parseInt","aria-colspan","param","toLowerCase","formatDate","formatTime","formatFiberLength","formatFiberId","formatLamdaZero","formatSlope","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15659ef9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css'\r\n\r\nexport const Headings = () => {\r\n    return (\r\n        <>\r\n            <h4 className=\"text-center\">PE.fiberoptics</h4>\r\n            <h4 className=\"text-center\">CD500 Dispersion Results</h4>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Table } from 'react-bootstrap'\r\n\r\nimport './index.css'\r\n\r\nexport const InputTable = ({ handleInput, date, time, fiberLength, fiberId, lamdaZero, slope, dropdown }) => {\r\n\r\n    // useEffect(() => {\r\n    //     formatDropdown(dropdown)\r\n    // }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Table className=\"table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Date of measurement</th>\r\n                        <td className='d-print-none'><input type='text' placeholder=\"dd/mm/yyyy\" value={date} onChange={({ target }) => handleInput('date', target.value)} /> at <input type='text' placeholder=\"hh:mm:ss\" value={time} onChange={({ target }) => handleInput('time', target.value)} /></td>\r\n                        <td className='d-none d-print-block'>{date} at {time}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Fiber length</th>\r\n                        <td className='d-print-none'><input type='text' placeholder=\"xx km\" value={fiberLength} onChange={({ target }) => handleInput('fiberLength', target.value)} /></td>\r\n                        <td className='d-none d-print-block'>{fiberLength}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Fiber ID</th>\r\n                        <td className='d-print-none'><input type='text' value={fiberId} onChange={({ target }) => handleInput('fiberId', target.value)} /></td>\r\n                        <td className='d-none d-print-block'>{fiberId}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"font-weight-bold\">Lamda zero</th>\r\n                        <td className='d-print-none d-flex justify-content-between'>\r\n                            <input type='text' value={lamdaZero} onChange={({ target }) => handleInput('lamdaZero', target.value)} />\r\n                            <select className=\"custom-select custom-select-sm dropdown\" value={dropdown} onChange={({ target }) => handleInput('dropdown', target.value)}>\r\n                                <option value='1'>G652D</option>\r\n                                <option value='2'>G655</option>\r\n                            </select>\r\n                            <button type=\"button\" className=\"btn btn-sm btn-secondary mx-3\" onClick={() => handleInput('dropdown', dropdown)}>Refresh</button>\r\n                            <button type=\"button\" className=\"btn btn-sm btn-success mx-3\" onClick={() => window.print()}>Save</button>\r\n                        </td>\r\n                        <td className='d-none d-print-block'>{lamdaZero}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th className=\"font-weight-bold\">Slope</th>\r\n                        <td className='d-print-none'><input type='text' value={slope} onChange={({ target }) => handleInput('slope', target.value)} /></td>\r\n                        <td className='d-none d-print-block'>{slope}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n            {/* Values: {min}, {max} */}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport './index.css'\r\n\r\n//Formulae = (slope/4*(x-lamda^4/x^3)) fix 3 decimal\r\nexport const Graph = ({ x, y }) => {\r\n    const data = {\r\n        labels: x,\r\n        datasets: [\r\n            {\r\n                fill: false,\r\n                lineTension: 0,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(0,0,0,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 3,\r\n                pointHitRadius: 10,\r\n                data: y\r\n            }\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>SINGLE MODE CHROMATIC DISPERSION</h2>\r\n            <Line\r\n                data={data}\r\n                options={{\r\n                    legend: {\r\n                        display: false,\r\n                    },\r\n                    scales: {\r\n                        xAxes: [\r\n                            {\r\n                                // type:'linear',\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Wavelength (nm)'\r\n                                },\r\n                                position: 'bottom',\r\n                                ticks: {\r\n                                    min: 1200,\r\n                                    max: 1600,\r\n                                    autoskip: true,\r\n                                    autoSkipPadding: 100,\r\n                                    beginAtZero: false,\r\n                                    suggestedMin: 1200,\r\n                                    suggestedMax: 1650,\r\n                                    precision: 100,\r\n                                }\r\n\r\n                            }\r\n                        ],\r\n                        yAxes: [\r\n                            {\r\n                                position: 'left',\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Dispersion (ps/nm/km)'\r\n                                },\r\n                                ticks: {\r\n                                    min: -5,\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                }}\r\n            />\r\n        </div>)\r\n}","import React from 'react';\r\nimport './index.css'\r\n\r\nconst getRow = (xVal, yVal, i) => {\r\n    return (\r\n        <tr key={i}>\r\n            <td className=\"sm-font mr-2\">{xVal}</td>\r\n            <td className=\"sm-font\">{yVal}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport const GraphValues = ({ x, y }) => {\r\n    let rowObject = []\r\n    for (let index = 0; index < x.length; index++) {\r\n        rowObject.push(\r\n            {\r\n                xAxix: x[index],\r\n                yAxix: parseFloat(y[index]).toFixed(3)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <table className=\"d-none d-print-block\">\r\n            <thead>\r\n                <tr>\r\n                    <th className='mr-2'>Wavelength<br />nm</th>\r\n                    <th>Dispersion<br />ps/nm/km</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rowObject.map((row, i) => getRow(row.xAxix, row.yAxix, i))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\nimport { Header } from './header';\nimport { Footer } from './footer';\nimport { Headings } from './heading';\nimport { InputTable } from './input-table';\nimport { Graph } from './chart';\nimport { GraphValues } from './graph-values';\nimport './App.css';\n\nfunction App() {\n\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const [fiberLength, setFiberLength] = useState('');\n  const [fiberId, setFiberId] = useState('');\n  const [dropdown, setDropdown] = useState(1);\n  const [min, setMin] = useState(0);\n  const [max, setMax] = useState(0);\n  const [minSlope, setMinSlope] = useState(0);\n  const [maxSlope, setMaxSlope] = useState(0);\n  const [lamdaZero, setLamdaZero] = useState((Math.random() * (max - min) + min).toFixed(2));\n  const [slope, setSlope] = useState((Math.random() * (maxSlope - minSlope) + minSlope).toFixed(4));\n  const x = [1250, 1260, 1270, 1280, 1285, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 1440, 1450, 1460, 1470, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550, 1560, 1565, 1570, 1580, 1590, 1600, 1610, 1620, 1625, 1630];\n  const [y, setY] = useState([]);\n\n  useEffect(() => {\n    formatDropdown(dropdown)\n  }, [dropdown]);\n\n  useEffect(() => {\n    setLamdaZero((Math.random() * (max - min) + min).toFixed(2));\n    setSlope((Math.random() * (maxSlope - minSlope) + minSlope).toFixed(4));\n  }, [min, max, minSlope, maxSlope]);\n\n  useEffect(() => {\n    let y = [];\n    x.forEach(xAxix => {\n      y.push(parseFloat((slope / 4 * (xAxix - Math.pow(lamdaZero, 4) / Math.pow(xAxix, 3))).toFixed(3)))\n    });\n    setY(y)\n    console.log(y);\n  }, [lamdaZero, slope]);\n\n  const formatDate = (date) => {\n    setDate(date)\n  }\n\n  const formatTime = (time) => {\n    setTime(time);\n  }\n\n  const formatFiberLength = (fiberLength) => {\n    setFiberLength(fiberLength);\n  }\n\n  const formatFiberId = (fiberId) => {\n    setFiberId(fiberId);\n  }\n\n  const formatLamdaZero = (lamdaZero) => {\n    setLamdaZero(lamdaZero);\n  }\n\n  const formatSlope = (slope) => {\n    setSlope(slope);\n  }\n  const formatDropdown = (dropdown) => {\n    setDropdown(dropdown);\n    switch (parseInt(dropdown)) {\n      case 1:\n        setMin(1312.36);\n        setMax(1318.87);\n        setMinSlope(0.0847)\n        setMaxSlope(0.0882)\n        break;\n      case 2:\n        setMin(1492.51);\n        setMax(1503.76);\n        setMinSlope(0.0781)\n        setMaxSlope(0.0872)\n        break;\n\n      default:\n        break;\n    }\n    setLamdaZero((Math.random() * (max - min) + min).toFixed(2));\n    setSlope((Math.random() * (maxSlope - minSlope) + minSlope).toFixed(4));\n  }\n\n  const handleInput = (param, value) => {\n    switch (param.toLowerCase()) {\n      case \"date\": {\n        formatDate(value);\n        break;\n      }\n      case \"time\": {\n        formatTime(value);\n        break;\n      }\n      case \"fiberlength\": {\n        formatFiberLength(value);\n        break;\n      }\n      case \"fiberid\": {\n        formatFiberId(value);\n        break;\n      }\n      case \"lamdazero\": {\n        formatLamdaZero(value);\n        break;\n      }\n      case \"slope\": {\n        formatSlope(value);\n        break;\n      }\n      case \"dropdown\": {\n        formatDropdown(value);\n        break;\n      }\n      default: ;\n    }\n  }\n  return (\n    <table className='container-fluid'>\n      <tbody className=\"\">\n        {/* <div className=\"content\"> */}\n        <tr aria-colspan={2}><Headings /></tr>\n        <br />\n        <tr aria-colspan={2}><InputTable handleInput={handleInput} date={date} time={time} fiberLength={fiberLength} fiberId={fiberId} dropdown={dropdown} lamdaZero={lamdaZero} slope={slope} /></tr>\n        <tr className='d-flex'>\n          <td className='mr-5'><Graph x={x} y={y} /></td>\n          <td><GraphValues x={x} y={y} /></td>\n        </tr>\n        {/* </div> */}\n      </tbody>\n    </table>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import $ from 'jquery';\n// import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <Fragment>\n    <App />\n  </Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}